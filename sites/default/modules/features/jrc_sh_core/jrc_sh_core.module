<?php

/**
 * @file
 * Code for the JRC-SH-core feature.
 */

/**
 * Implements hook_facet_items_alter().
 */
function jrc_sh_core_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == 'dm_field_dc_date_issued') {
    // First make sure to have an empty array.
    $all_years_array = array();
    foreach ($build as $key => $item) {
      // Then split the search values into two "year" part.
      // Example : [2004-01-01T00:00:00Z TO 2005-01-01T00:00:00Z]
      // For the first year filter, we need to get the first and second year.
      if (empty($all_years_array)) {
        preg_match('/\[(\d{4})/i', $key, $matches);
        $all_years_array[] = $matches[1];
      }
      // Then we only get the second years.
      if (!empty($all_years_array)) {
        preg_match('/TO (\d{4})/i', $key, $matches);
        $all_years_array[] = $matches[1];
      }
    }
    // And we reconstruct the build variable.
    foreach ($all_years_array as $year) {
      $query = db_select('apachesolr_index_entities_node', 'a');
      $query->fields('a');
      $query->leftJoin('field_data_field_dc_date_issued', 'f', 'a.entity_id = f.entity_id');
      $query->condition('f.field_dc_date_issued_value', $year . '-01-01 00:00:00', '=');
      $results = $query->execute();
      $publications_count = $results->rowCount();
      $override_string = "[" . $year . "-01-01T00:00:00Z TO " . $year . "-12-31T00:00:00Z]";
      $new_build[$override_string] = array(
        '#markup' => $year,
        '#path' => 'publications-list/',
        '#html' => FALSE,
        '#indexed_value' => $override_string,
        '#count' => $publications_count,
        '#active' => 0,
        '#item_parents' => array(),
        '#item_children' => array(),
        '#query' => array(
          'f' => array(
            '0' => 'dm_field_dc_date_issued:' . $override_string ,
          ),
        ),
      );
    }
    // Set the filter element as active if it's the only one.
    if (count($new_build) == 1) {
      foreach ($new_build as $key => $value) {
        $new_build[$key]['#active'] = 1;
        $new_build[$key]['#query'] = array();
      }
    }
    $build = $new_build;
  }
}

/**
 * Implements hook_user_default_permissions_alter().
 */
function jrc_sh_core_user_default_permissions_alter(&$permissions) {
  // Event content type's permissions.
  if (!empty($permissions['delete any event content']['roles']['contributor'])) {
    unset($permissions['delete any event content']['roles']['contributor']);
  }
  if (!empty($permissions['delete any event content']['roles']['editor'])) {
    unset($permissions['delete any event content']['roles']['editor']);
  }
  if (empty($permissions['create event content']['roles']['webmaster'])) {
    $permissions['create event content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['edit own event content']['roles']['webmaster'])) {
    $permissions['edit own event content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['edit any event content']['roles']['webmaster'])) {
    $permissions['edit any event content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['delete own event content']['roles']['webmaster'])) {
    $permissions['delete own event content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['delete any event content']['roles']['webmaster'])) {
    $permissions['delete any event content']['roles']['webmaster'] = 'webmaster';
  }
  // News content type's permissions.
  if (!empty($permissions['create news content']['roles']['contributor'])) {
    unset($permissions['create news content']['roles']['contributor']);
  }
  if (!empty($permissions['edit own news content']['roles']['contributor'])) {
    unset($permissions['edit own news content']['roles']['contributor']);
  }
  if (!empty($permissions['edit any news content']['roles']['contributor'])) {
    unset($permissions['edit any news content']['roles']['contributor']);
  }
  if (!empty($permissions['delete own news content']['roles']['contributor'])) {
    unset($permissions['delete own news content']['roles']['contributor']);
  }
  if (!empty($permissions['delete any news content']['roles']['contributor'])) {
    unset($permissions['delete any news content']['roles']['contributor']);
  }
  if (!empty($permissions['create news content']['roles']['editor'])) {
    unset($permissions['create news content']['roles']['editor']);
  }
  if (!empty($permissions['edit own news content']['roles']['editor'])) {
    unset($permissions['edit own news content']['roles']['editor']);
  }
  if (!empty($permissions['edit any news content']['roles']['editor'])) {
    unset($permissions['edit any news content']['roles']['editor']);
  }
  if (!empty($permissions['delete own news content']['roles']['editor'])) {
    unset($permissions['delete own news content']['roles']['editor']);
  }
  if (!empty($permissions['delete any news content']['roles']['editor'])) {
    unset($permissions['delete any news content']['roles']['editor']);
  }
  if (empty($permissions['create news content']['roles']['webmaster'])) {
    $permissions['create news content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['edit own news content']['roles']['webmaster'])) {
    $permissions['edit own news content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['edit any news content']['roles']['webmaster'])) {
    $permissions['edit any news content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['delete own news content']['roles']['webmaster'])) {
    $permissions['delete own news content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['delete any news content']['roles']['webmaster'])) {
    $permissions['delete any news content']['roles']['webmaster'] = 'webmaster';
  }
  // FAQ content type's permissions.
  if (empty($permissions['create f_a_q content']['roles']['webmaster'])) {
    $permissions['create f_a_q content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['edit own f_a_q content']['roles']['webmaster'])) {
    $permissions['edit own f_a_q content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['edit any f_a_q content']['roles']['webmaster'])) {
    $permissions['edit any f_a_q content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['delete own f_a_q content']['roles']['webmaster'])) {
    $permissions['delete own f_a_q content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['delete any f_a_q content']['roles']['webmaster'])) {
    $permissions['delete any f_a_q content']['roles']['webmaster'] = 'webmaster';
  }
  if (empty($permissions['create f_a_q content']['roles']['editor'])) {
    $permissions['create f_a_q content']['roles']['editor'] = 'editor';
  }
  if (empty($permissions['edit own f_a_q content']['roles']['editor'])) {
    $permissions['edit own f_a_q content']['roles']['editor'] = 'editor';
  }
  if (empty($permissions['delete own f_a_q content']['roles']['editor'])) {
    $permissions['delete own f_a_q content']['roles']['editor'] = 'editor';
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function jrc_sh_core_strongarm_alter(&$items) {
  // Event content type.
  if (!empty($items['comment_event'])) {
    $items['comment_event']->value = 1;
  }
  if (!empty($items['language_content_type_event'])) {
    $items['language_content_type_event']->value = 0;
  }
  if (!empty($items['field_bundle_settings_node__event'])) {
    $items['field_bundle_settings_node__event']->value = array(
      'view_modes' => array(
        'apache_solr_mode' => array(
          'custom_settings' => TRUE,
        ),
      ),
      'extra_fields' => array(
        'form' => array(
          'title' => array(
            'weight' => '-10',
          ),
          'path' => array(
            'weight' => '8',
          ),
        ),
        'display' => array(
          'language' => array(
            'default' => array(
              'weight' => '10',
              'visible' => FALSE,
            ),
            'apache_solr_mode' => array(
              'weight' => '15',
              'visible' => FALSE,
            ),
          ),
        ),
      ),
    );
  }

  // News content type.
  if (!empty($items['comment_news'])) {
    $items['comment_news']->value = 1;
  }
  if (!empty($items['language_content_type_news'])) {
    $items['language_content_type_news']->value = 0;
  }
  if (!empty($items['field_bundle_settings_node__news'])) {
    $items['field_bundle_settings_node__news']->value = array(
      'view_modes' => array(
        'apache_solr_mode' => array(
          'custom_settings' => TRUE,
        ),
      ),
      'extra_fields' => array(
        'form' => array(
          'title' => array(
            'weight' => '-10',
          ),
          'path' => array(
            'weight' => '8',
          ),
        ),
        'display' => array(
          'language' => array(
            'default' => array(
              'weight' => '10',
              'visible' => FALSE,
            ),
            'apache_solr_mode' => array(
              'weight' => '15',
              'visible' => FALSE,
            ),
          ),
        ),
      ),
    );
  }

  // FAQ content type.
  if (!empty($items['comment_f_a_q'])) {
    $items['comment_f_a_q']->value = 1;
  }
  if (!empty($items['language_content_type_f_a_q'])) {
    $items['language_content_type_f_a_q']->value = 0;
  }
  if (!empty($items['field_bundle_settings_node__f_a_q'])) {
    $items['field_bundle_settings_node__f_a_q']->value = array(
      'view_modes' => array(
        'apache_solr_mode' => array(
          'custom_settings' => TRUE,
        ),
      ),
      'extra_fields' => array(
        'form' => array(
          'title' => array(
            'weight' => '-10',
          ),
          'path' => array(
            'weight' => '8',
          ),
        ),
        'display' => array(
          'language' => array(
            'default' => array(
              'weight' => '10',
              'visible' => FALSE,
            ),
            'apache_solr_mode' => array(
              'weight' => '15',
              'visible' => FALSE,
            ),
          ),
        ),
      ),
    );
  }

  // Audio file type.
  if (!empty($items['field_bundle_settings_file__audio'])) {
    $items['field_bundle_settings_file__audio']->value = array(
      'view_modes' => array(
        'apache_solr_mode' => array(
          'custom_settings' => TRUE,
        ),
      ),
      'extra_fields' => array(
        'form' => array(),
        'display' => array(
          'file' => array(
            'apache_solr_mode' => array(
              'weight' => 2,
              'visible' => FALSE,
            ),
          ),
        ),
      ),
    );
  }

  // Image file type.
  if (!empty($items['field_bundle_settings_file__image'])) {
    $items['field_bundle_settings_file__image']->value = array(
      'view_modes' => array(
        'apache_solr_mode' => array(
          'custom_settings' => TRUE,
        ),
        'image_gallery' => array(
          'custom_settings' => TRUE,
        ),
        'rss' => array(
          'custom_settings' => TRUE,
        ),
      ),
      'extra_fields' => array(
        'form' => array(),
        'display' => array(
          'file' => array(
            'apache_solr_mode' => array(
              'weight' => 3,
              'visible' => FALSE,
            ),
          ),
        ),
      ),
    );
  }

  // Video file type.
  if (!empty($items['field_bundle_settings_file__video'])) {
    $items['field_bundle_settings_file__video']->value = array(
      'view_modes' => array(
        'apache_solr_mode' => array(
          'custom_settings' => TRUE,
        ),
      ),
      'extra_fields' => array(
        'form' => array(),
        'display' => array(
          'file' => array(
            'apache_solr_mode' => array(
              'weight' => 2,
              'visible' => FALSE,
            ),
          ),
        ),
      ),
    );
  }
}

/**
 * Implements hook_field_default_field_instances_alter().
 */
function jrc_sh_core_field_default_field_instances_alter(&$fields) {
  // Event content type.
  if (!empty($fields['node-event-field_event_date'])) {
    $fields['node-event-field_event_date']['display']['default']['weight'] = 2;
    $fields['node-event-field_event_date']['display']['apache_solr_mode']['label'] = 'hidden';
    $fields['node-event-field_event_date']['display']['apache_solr_mode']['settings']['format_type'] = 'jrc_date';
    $fields['node-event-field_event_date']['display']['apache_solr_mode']['weight'] = 1;
  }
  if (!empty($fields['node-event-body'])) {
    $fields['node-event-body']['display']['default']['weight'] = 5;
    $fields['node-event-body']['display']['apache_solr_mode']['label'] = 'hidden';
    $fields['node-event-body']['display']['apache_solr_mode']['module'] = 'text';
    $fields['node-event-body']['display']['apache_solr_mode']['settings']['trim_length'] = 600;
    $fields['node-event-body']['display']['apache_solr_mode']['type'] = 'text_summary_or_trimmed';
    $fields['node-event-body']['display']['apache_solr_mode']['weight'] = 5;
  }
  if (!empty($fields['node-event-field_tags'])) {
    $fields['node-event-field_tags']['label'] = 'Keywords';
    $fields['node-event-field_tags']['widget']['type'] = 'options_select';
  }
  // News content type.
  if (!empty($fields['node-news-body'])) {
    $fields['node-news-body']['display']['default']['weight'] = 3;
    $fields['node-news-body']['display']['apache_solr_mode']['label'] = 'hidden';
    $fields['node-news-body']['display']['apache_solr_mode']['module'] = 'text';
    $fields['node-news-body']['display']['apache_solr_mode']['settings']['trim_length'] = 600;
    $fields['node-news-body']['display']['apache_solr_mode']['type'] = 'text_summary_or_trimmed';
    $fields['node-news-body']['display']['apache_solr_mode']['weight'] = 3;
  }
  if (!empty($fields['node-news-field_tags'])) {
    $fields['node-news-field_tags']['label'] = 'Keywords';
    $fields['node-news-field_tags']['widget']['type'] = 'options_select';
  }
  // FAQ content type.
  if (!empty($fields['node-f_a_q-body'])) {
    $fields['node-f_a_q-body']['display']['default']['module'] = 'expanding_formatter';
    $fields['node-f_a_q-body']['display']['default']['type'] = 'expanding_formatter_text_summary_or_trimmed';
    $fields['node-f_a_q-body']['display']['apache_solr_mode']['label'] = 'hidden';
    $fields['node-f_a_q-body']['display']['apache_solr_mode']['module'] = 'expanding_formatter';
    $fields['node-f_a_q-body']['display']['apache_solr_mode']['type'] = 'expanding_formatter_text_trimmed';
    $fields['node-f_a_q-body']['display']['apache_solr_mode']['settings'] = array(
      'trim_length' => 80,
      'trim_ellipsis' => TRUE,
      'effect' => 'slide',
      'css3' => TRUE,
      'js_duration' => 500,
      'trigger_expanded_label' => 'View answer',
      'trigger_collapsed_label' => 'Hide answer',
      'trigger_classes' => 'button',
      'inline' => TRUE,
    );
  }
  if (!empty($fields['node-f_a_q-field_tags'])) {
    $fields['node-f_a_q-field_tags']['label'] = 'Keywords';
    $fields['node-f_a_q-field_tags']['widget']['type'] = 'options_select';
  }
}

/**
 * Implements hook_field_group_info_alter().
 */
function jrc_sh_core_field_group_info_alter(&$groups) {
  // Event content type.
  if (!empty($groups['group_event_content|node|event|form'])) {
    $groups['group_event_content|node|event|form']->data['children'] = array(
      0 => 'body',
      1 => 'field_location',
      2 => 'field_country_iso',
      3 => 'field_event_involvement',
      4 => 'field_event_registration',
      5 => 'field_event_type',
      6 => 'field_image',
      7 => 'field_short_title',
      8 => 'field_town',
      9 => 'title',
    );
  }
  if (!empty($groups['group_event_date|node|event|form'])) {
    $groups['group_event_date|node|event|form']->data['children'] = array(
      0 => 'field_event_date',
      1 => 'field_last_update',
      2 => 'field_publish_date',
      3 => 'field_unpublish_date',
    );
  }
  if (!empty($groups['group_event_metadata|node|event|form'])) {
    $groups['group_event_metadata|node|event|form']->data['children'] = array(
      0 => 'field_resource',
      1 => 'field_meta_creator',
      2 => 'field_mk',
      3 => 'path',
      4 => 'redirect',
    );
  }
  // News content type.
  if (!empty($groups['group_news_content|node|news|form'])) {
    $groups['group_news_content|node|news|form']->data['children'] = array(
      0 => 'body',
      1 => 'field_link',
      2 => 'field_image',
      3 => 'field_short_title',
      4 => 'title',
    );
  }
  // FAQ content type.
  if (!empty($groups['group_faq_metadata|node|f_a_q|form'])) {
    $groups['group_faq_metadata|node|f_a_q|form']->data['weight'] = 4;
  }
}

/**
 * Implements hook_node_insert().
 */
function jrc_sh_core_node_insert($node) {
  // Add the menu items automatically for sub-site's sub-pages,
  // but not for the main sub-site page.
  // The main sub-site menu link is created by the "OG Menu Default Links".
  // We check if we're in a content_type related to OG fields,
  // And it contains a value.
  if (isset($node->og_group_ref) && !empty($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
    $node->menu = array(
      'link_title' => $node->title,
      'menu_name' => 'menu-og-' . $node->og_group_ref[LANGUAGE_NONE][0]['target_id'],
      'plid' => 0,
      'enabled' => 1,
      'description' => '',
    );
  }

}

/**
 * Implements hook_block_info().
 */
function jrc_sh_core_block_info() {
  $blocks = array();
  $blocks['related_twitter_hashtag_block'] = array(
    'info' => t('Related Twitter feeds'),
  );
  $blocks['apachesolr_freetext_search_block'] = array(
    'info' => t('Apache Solr Search Block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function jrc_sh_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'related_twitter_hashtag_block':
      $node = menu_get_object('node', 1);
      if ($node) {
        $wrapper = entity_metadata_wrapper('node', $node->nid);
        if ($tw = $wrapper->field_related_twitter_hashtag->value()) {
          $twitter_service = array(
            'service' => 'smk',
            'type' => 'search',
            'incl_hashtags' => $tw,
          );
          $twtag = drupal_json_encode($twitter_service);
          $variables['element'] = array(
            '#type' => 'html_tag',
            '#tag' => 'script',
            '#attributes' => array(
              'type' => 'application/json',
            ),
            '#value' => $twtag,
          );

          $block['subject'] = $tw;
          $block['content'] = theme('html_tag', $variables);
        }
      }
      break;

    case 'apachesolr_freetext_search_block':
      if (arg(0) == 'search' && arg(1) == 'site') {
        $keys = urldecode(arg(2));
      }
      else {
        $keys = urldecode(arg(1));
      }
      $block_content = drupal_get_form('_jrc_sh_core_freetext_search_form', $keys);
      $block['content'] = drupal_render($block_content);
      break;
  }
  return $block;
}

/**
 * The free text search form for ApacheSolr pages.
 *
 * @param object $keys
 *   The search words/keys.
 */
function _jrc_sh_core_freetext_search_form($form, &$form_state, $keys = '') {
  $form = array();
  $form['#id'] = 'search-form';
  $form['#attributes']['class'][] = 'search-form';

  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );

  $form['basic']['keys'] = array(
    '#type' => 'textfield',
    '#default_value' => $keys,
    '#size' => 20,
    '#maxlength' => 255,
    '#attributes' => array('placeholder' => array('Search on ' . drupal_get_title())),
  );

  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

/**
 * The submit function for the free text search form for ApacheSolr pages.
 */
function _jrc_sh_core_freetext_search_form_submit(&$form, &$form_state) {
  // Should get the URL from the defined search pages.
  if (arg(0) == 'search' && arg(1) == 'site') {
    $redirect = 'search/site';
  }
  else {
    $redirect = arg(0);
  }
  $redirect_value = rawurlencode($form_state['values']['keys']);
  if (drupal_strlen($form_state['values']['keys'])) {
    $redirect .= '/' . $redirect_value;
  }

  $get = drupal_get_query_parameters();
  if (!empty($get)) {
    unset($get['q']);
    // Reset to first page.
    unset($get['page']);
  }
  $form_state['redirect'] = array($redirect, array('query' => $get));
}

/**
 * Implements hook_block_view_alter().
 */
function jrc_sh_core_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'footer_ipg':
      // Change the date by the last update date.
      $node = menu_get_object();
      if (isset($node->field_last_update[LANGUAGE_NONE][0]['value'])) {
        $new_date = format_date(strtotime($node->field_last_update[LANGUAGE_NONE][0]['value']), 'short_day_first');
        $block_content = $data['content'];
        $block_content = explode('|', $block_content);
        $block_content[0] = 'Last update: ' . $new_date . ' ';
        $data['content'] = implode('|', $block_content);
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrc_sh_core_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {
  $form['upload']['#upload_validators']['_jrc_sh_core_file_already_exists'] = array();
}

/**
 * Avoid uploading a file having the same name than an already existing file.
 *
 * @param object $file
 *   The uploaded file.
 *
 * @return array
 *   Returns errors.
 */
function _jrc_sh_core_file_already_exists($file) {
  global $base_url;
  $errors = array();
  $file_exist = db_select('file_managed', 'fm')
    ->fields('fm')
    ->condition('fm.filename', $file->filename)
    ->execute();
  if ($files = $file_exist->fetchAssoc()) {
    if (empty($errors)) {
      $errors[] = t('The file %filename already exists. Please rename it and upload it again.', array('%filename' => $file->filename));
    }
    do {
      $filename = l($file->filename, $base_url . '/file/' . $files['type'] . '/' . $files['fid'], array('attributes' => array('target' => '_blank')));
      $show_list = l(t('View content using this file'), $base_url . '/file/' . $files['fid'] . '/usage', array('attributes' => array('target' => '_blank')));
      $edit = l(t('Edit/replace existing file'), $base_url . '/file/' . $files['fid'] . '/edit', array('attributes' => array('target' => '_blank')));
      $errors[] = t('View existing file: !filename | !show_list | !edit', array(
        '!filename' => $filename,
        '!show_list' => $show_list,
        '!edit' => $edit,
      ));
    } while ($files = $file_exist->fetchAssoc());
  }
  return $errors;
}

/**
 * Implements hook_file_delete().
 */
function jrc_sh_core_file_delete($file) {
  db_delete('file_managed')
    ->condition('fid', $file->fid)
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrc_sh_core_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  $form['role_permissions'] = array(
    '#type' => 'value',
    '#value' => array(),
  );
  foreach ($form['role_names'] as $rid => $role) {
    if (strpos($rid, '#') !== FALSE) {
      continue;
    }
    $role_permissions = user_role_permissions(array($rid => $rid));
    $form['role_permissions']['#value'][$rid] = $role_permissions[$rid];
  }
  $form['#submit'][] = '_jrc_sh_core_form_user_admin_permissions_alter_submit';
}

/**
 * Log the changed user permissions.
 *
 * @param string $form
 *   The submitted form.
 * @param string $form_state
 *   The submitted form states.
 */
function _jrc_sh_core_form_user_admin_permissions_alter_submit(&$form, &$form_state) {
  global $user;
  foreach ($form['role_permissions']['#value'] as $rid => $role_permissions) {
    $data = array();
    foreach ($form_state['values'][$rid] as $permission => $value) {
      if (!isset($role_permissions[$permission])) {
        if ($value) {
          $data[$permission] = 1;
        }
      }
      elseif (!$role_permissions[$permission] && $value) {
        $data[$permission] = 1;
      }
      elseif ($role_permissions[$permission] && !$value) {
        $data[$permission] = 0;
      }
    }
    if (count($data)) {
      watchdog('permissions_changes',
        'The user "%user" changed the following permission(s) for the role "%role" to : %permissions',
        array(
          '%user' => $user->name,
          '%permissions' => print_r($data, TRUE),
          '%role' => $form['role_names'][$rid]['#markup'],
        ),
        WATCHDOG_NOTICE,
        NULL);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrc_sh_core_form_jrc_staff_node_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']->nid)) {
    $jrc_staff_notification_delay = variable_get('jrc_staff_notification_delay', 6);
    $form['field_jrc_staff_delay'][LANGUAGE_NONE][0]['value']['#default_value'] = $jrc_staff_notification_delay;
  }
  $form['field_jrc_staff_delay'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('element_validate_integer_positive');

  // Publy link
  // for insert, exclude all already added pubsy authors.
  $subquery_result = db_select('field_data_field_pubsy_author', 'b')
    ->fields('b', array('field_pubsy_author_value'));

  $result = db_select('field_data_field_dc_contributor_author', 'a')
    ->distinct()
    ->fields('a', array('field_dc_contributor_author_value'))
    ->condition('a.field_dc_contributor_author_value', $subquery_result, 'NOT IN')
    ->orderBy('field_dc_contributor_author_value', 'ASC')
    ->execute();

  while ($record = $result->fetchAssoc()) {
    $form['field_pubsy_author'][LANGUAGE_NONE]['#options'][$record['field_dc_contributor_author_value']] = $record['field_dc_contributor_author_value'];
  }

  // For update, exclude all but current.
  if (isset($form['field_pubsy_author'][LANGUAGE_NONE]['#entity'])) {
    $entity = $form['field_pubsy_author'][LANGUAGE_NONE]['#entity'];
    if (!empty($entity->field_pubsy_author[LANGUAGE_NONE][0]['value'])) {
      $current_author = $entity->field_pubsy_author[LANGUAGE_NONE][0]['value'];
      $form['field_pubsy_author'][LANGUAGE_NONE]['#options'][$current_author] = $current_author;
      asort($form['field_pubsy_author'][LANGUAGE_NONE]['#options']);
      $form['field_pubsy_author'][LANGUAGE_NONE]['#default_value'][] = $current_author;
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function jrc_sh_core_views_pre_view(&$view, &$display_id, &$args) {
  if (($view->name == 'jrc_news' && $view->current_display == 'block_related_news_on_basic') ||
        ($view->name == 'jrc_events' && $view->current_display == 'block_related_events_on_basic') ||
      ($view->name == 'jrc_related_content_new' && ($view->current_display == 'block_related_publications_on_basic' ||
                                                     $view->current_display == 'block_related_sc_tools_on_basic' ||
                                                     $view->current_display == 'related_facilities_on_basic'))) {
    // If no keywords or no identities.
    if (empty($args)) {
      $node = menu_get_object('node', 1);
      if ($node) {
        $keywords = array();
        if (!empty($node->field_tags[LANGUAGE_NONE])) {
          foreach ($node->field_tags[LANGUAGE_NONE] as $term) {
            $keywords[] = $term['tid'];
          }
        }

        $identities = array();
        if (!empty($node->field_identities[LANGUAGE_NONE])) {
          foreach ($node->field_identities[LANGUAGE_NONE] as $term) {
            $identities[] = $term['tid'];
          }
        }
        if (!empty($keywords) || !empty($identities)) {
          if (!empty($keywords)) {
            $args[0] = implode(',', $keywords);
          }
          else {
            $args[0] = 'all';
          }

          if (!empty($identities)) {
            $args[1] = implode(',', $identities);
          }
          else {
            $args[1] = 'all';
          }
        }
      }
    }
  }
  if ($view->name == 'jrc_related_content_new' && ($view->current_display == 'people_related_publications')) {
    // We add a custom "More" button to this view block.
    if (($current_node = menu_get_object()) && isset($current_node->field_pubsy_author[LANGUAGE_NONE][0]['value'])) {
      $field_pubsy_author_name = $current_node->field_pubsy_author[LANGUAGE_NONE][0]['value'];
      $view_footer = '<a href="[site:url]/publications-list?f%5B0%5D=sm_field_dc_contributor_author%3A' . $field_pubsy_author_name . '" class="more button" title="More">More &nbsp;&gt;</a>';
      $options = array(
        'id' => 'area',
        'table' => 'views',
        'field' => 'area',
        'empty' => FALSE,
        'content' => $view_footer,
        'format' => 'full_html',
        'tokenize' => 1,
      );
      $view->set_item('people_related_publications', 'footer', 'area', $options);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function jrc_sh_core_views_query_alter(&$view, &$query) {
  if (($view->name == 'jrc_news' && ($view->current_display == 'block_related_news_on_basic' ||
                                     $view->current_display == 'rel_news_on_page' ||
                                     $view->current_display == 'block_related_science_updates_on_subsites')) ||
      ($view->name == 'jrc_events' && ($view->current_display == 'block_related_events_on_basic' || $view->current_display == 'rel_events_on_page')) ||
      ($view->name == 'jrc_related_content_new' && ($view->current_display == 'block_related_publications_on_basic' ||
                                                      $view->current_display == 'block_related_sc_tools_on_basic' ||
                                                      $view->current_display == 'related_facilities_on_basic')
      )) {
    // First switch where clauses.
    $value0 = $query->where[0];
    $value1 = $query->where[1];
    $query->where[0] = $value1;
    $query->where[1] = $value0;
    // Then change the AND to OR.
    $query->where[1]['type'] = 'OR';
    foreach ($query->table_queue as $idx => $val) {
      if (!(strpos($idx, 'taxonomy_index_value_') === FALSE)) {
        // Force left join so to comply with OR operation.
        $query->table_queue[$idx]['join']->type = 'LEFT';
      }
    }
  }
  if ($view->name == 'jrc_related_content_new' && ($view->current_display == 'people_related_publications')) {
    $where = $query->where;
    foreach ($where as $key1 => $conditions) {
      foreach ($conditions as $key2 => $condition) {
        if ($key2 == 'conditions') {
          foreach ($condition as $key3 => $value) {
            if ($value['field'] == 'field_data_field_dc_contributor_author.field_dc_contributor_author_value') {
              $current_node_id = $value['value'];
              if (($current_node = node_load($current_node_id)) && isset($current_node->field_pubsy_author[LANGUAGE_NONE][0]['value'])) {
                $query->where[$key1]['conditions'][$key3]['value'] = $current_node->field_pubsy_author[LANGUAGE_NONE][0]['value'];
              }
              break 3;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function jrc_sh_core_permission() {
  return array(
    'menu view unpublished' => array(
      'title' => t('View unpublished menu links'),
    ),
  );
}

/**
 * Implements hook_og_permission().
 */
function jrc_sh_core_og_permission() {
  return array(
    'menu OG view unpublished' => array(
      'title' => t('View OG unpublished menu links'),
    ),
  );
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see menu_tree_check_access()
 *   Contains the query being altered here.
 *   This is most likely the only query with tag node_access
 *   where the first condition is for the node.status column.
 */
function jrc_sh_core_query_node_access_alter(QueryAlterableInterface $query) {
  // We want to show unpulished menu links to some roles.
  // First we check if we're in an organic group
  // if yes, then we get the related group ID.
  $gid = "";
  $node = menu_get_object();
  // We check if we're in a content_type related to OG fields.
  if (isset($node->og_group_ref)) {
    // Then we check if the current page is the main page of the sub-site.
    if (isset($node->group_group[LANGUAGE_NONE][0]['value']) && ($node->group_group[LANGUAGE_NONE][0]['value'] == 1)) {
      $gid = $node->nid;
    }
    // Or if it's a sub-page of the sub-site.
    elseif (!empty($node->og_group_ref)) {
      $gid = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    }
  }
  // Then we check
  // if the current user has the drupal 'menu view unpublished' permission
  // Or the organic group one which is 'menu OG view unpublished'.
  if (user_access('menu view unpublished')
     || (!empty($gid) && (og_user_access('node', $gid, 'menu OG view unpublished')))
     ) {
    $c = &$query->conditions();
    // Remove the status condition if we suspect this query originates from
    // menu_tree_check_access().
    if (count($c) == 3 &&
      is_string($c[0]['field']) && $c[0]['field'] == 'n.status' &&
      is_string($c[1]['field']) && $c[1]['field'] == 'n.nid' && $c[1]['operator'] == 'IN') {
      unset($c[0]);
    }
  }
}

/**
 * Implements hook_apachesolr_index_document_build_node().
 */
function jrc_sh_core_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $entity_type) {
  $event_date = field_get_items('node', $entity, 'field_event_date');
  $news_date = field_get_items('node', $entity, 'field_news_date');
  $publication_date = field_get_items('node', $entity, 'field_dc_date_available');
  $press_release_date = field_get_items('node', $entity, 'field_press_release_date');
  $created = $entity->created;
  // Add two "SINGLE" event date (ds_) to the Apachesolr index.
  if (!empty($event_date)) {
    $document->addField('ds_field_event_date', apachesolr_date_iso($event_date[0]['value']));
    $document->addField('ds_field_event_date_end', apachesolr_date_iso($event_date[0]['value2']));
  }
  else {
    $document->addField('ds_field_event_date', apachesolr_date_iso($created));
    $document->addField('ds_field_event_date_end', apachesolr_date_iso($created));
  }
  // Add a "SINGLE" news date (ds_) to the Apachesolr index.
  if (!empty($news_date)) {
    $document->addField('ds_field_news_date', apachesolr_date_iso(strtotime($news_date[0]['value'])));
  }
  else {
    $document->addField('ds_field_news_date', apachesolr_date_iso($created));
  }
  // Add a "SINGLE" publication availability date (ds_) to the Apachesolr index.
  if (!empty($publication_date)) {
    $document->addField('ds_field_dc_date_available', apachesolr_date_iso(strtotime($publication_date[0]['value'])));
  }
  else {
    $document->addField('ds_field_dc_date_available', apachesolr_date_iso($created));
  }
  // Add a "SINGLE" press release date (ds_) to the Apachesolr index.
  if (!empty($press_release_date)) {
    $document->addField('ds_field_press_release_date', apachesolr_date_iso(strtotime($press_release_date[0]['value'])));
  }
  else {
    $document->addField('ds_field_press_release_date', apachesolr_date_iso($created));
  }
}

/**
 * Implements hook_apachesolr_query_prepare().
 */
function jrc_sh_core_apachesolr_query_prepare($query) {
  $path = menu_get_item();
  $current_path = $path['map'][0];
  switch ($current_path) {
    case 'events':
      // First remove both date and title sorting labels.
      $query->removeAvailableSort('sort_label');
      $query->removeAvailableSort('ds_created');

      // Then add a custom date field and title.
      $query->setAvailableSort('ds_field_event_date', array('title' => t('Date'), 'default' => 'asc'));
      $query->setAvailableSort('sort_label', array('title' => t('Title'), 'default' => 'asc'));

      // Default sort by custom date (ds_field_event_date).
      $url_params = drupal_get_query_parameters();
      if (!empty($url_params) && isset($url_params['solrsort'])) {
        $solr_sort = explode(' ', $url_params['solrsort']);
        $query->setSolrsort($solr_sort[0], $solr_sort[1]);
      }
      else {
        $query->setSolrsort('ds_field_event_date', 'asc');
      }
      break;

    case 'past-events-list':
    case 'training-events-list':
      // First remove both date and title sorting labels.
      $query->removeAvailableSort('sort_label');
      $query->removeAvailableSort('ds_created');

      // Then add a custom date field and title.
      $query->setAvailableSort('ds_field_event_date', array('title' => t('Date'), 'default' => 'desc'));
      $query->setAvailableSort('sort_label', array('title' => t('Title'), 'default' => 'asc'));

      // Default sort by custom date (ds_field_event_date).
      $url_params = drupal_get_query_parameters();
      if (!empty($url_params) && isset($url_params['solrsort'])) {
        $solr_sort = explode(' ', $url_params['solrsort']);
        $query->setSolrsort($solr_sort[0], $solr_sort[1]);
      }
      else {
        $query->setSolrsort('ds_field_event_date', 'desc');
      }
      break;

    case 'news-feed':
    case 'science-updates':
      // First remove both date and title sorting labels.
      $query->removeAvailableSort('sort_label');
      $query->removeAvailableSort('ds_created');

      // Then add a custom date field and title.
      $query->setAvailableSort('ds_field_news_date', array('title' => t('Date'), 'default' => 'desc'));
      $query->setAvailableSort('sort_label', array('title' => t('Title'), 'default' => 'asc'));

      // Default sort by custom date (ds_field_event_date).
      $url_params = drupal_get_query_parameters();
      if (!empty($url_params) && isset($url_params['solrsort'])) {
        $solr_sort = explode(' ', $url_params['solrsort']);
        $query->setSolrsort($solr_sort[0], $solr_sort[1]);
      }
      else {
        $query->setSolrsort('ds_field_news_date', 'desc');
      }
      break;

    case 'publications-list':
      // First remove both date and title sorting labels.
      $query->removeAvailableSort('sort_label');
      $query->removeAvailableSort('ds_created');

      // Then add a custom date field and title.
      $query->setAvailableSort('ds_field_dc_date_available', array('title' => t('Date'), 'default' => 'desc'));
      $query->setAvailableSort('sort_label', array('title' => t('Title'), 'default' => 'asc'));

      // Default sort by custom date (ds_field_event_date).
      $url_params = drupal_get_query_parameters();
      if (!empty($url_params) && isset($url_params['solrsort'])) {
        $solr_sort = explode(' ', $url_params['solrsort']);
        $query->setSolrsort($solr_sort[0], $solr_sort[1]);
      }
      else {
        $query->setSolrsort('ds_field_dc_date_available', 'desc');
      }
      break;

    case 'press-releases-list':
      // First remove both date and title sorting labels.
      $query->removeAvailableSort('sort_label');
      $query->removeAvailableSort('ds_created');

      // Then add a custom date field and title.
      $query->setAvailableSort('ds_field_press_release_date', array('title' => t('Date'), 'default' => 'desc'));
      $query->setAvailableSort('sort_label', array('title' => t('Title'), 'default' => 'asc'));

      // Default sort by custom date (ds_field_event_date).
      $url_params = drupal_get_query_parameters();
      if (!empty($url_params) && isset($url_params['solrsort'])) {
        $solr_sort = explode(' ', $url_params['solrsort']);
        $query->setSolrsort($solr_sort[0], $solr_sort[1]);
      }
      else {
        $query->setSolrsort('ds_field_press_release_date', 'desc');
      }
      break;

    case 'search':
    case 'photo-galleries-list':
    case 'video-galleries-list':
      // Default sort by custom date (ds_field_event_date).
      $url_params = drupal_get_query_parameters();
      if (!empty($url_params) && isset($url_params['solrsort'])) {
        $solr_sort = explode(' ', $url_params['solrsort']);
        $query->setSolrsort($solr_sort[0], $solr_sort[1]);
      }
      else {
        $query->setSolrsort('ds_created', 'desc');
      }
      break;
  }
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function jrc_sh_core_apachesolr_query_alter($query) {
  $query->addParam('fl', 'ds_field_event_date');
  $query->addParam('fl', 'ds_field_event_date_end');
  $query->addParam('fl', 'ds_field_news_date');
  $query->addParam('fl', 'ds_field_dc_date_available');
  $query->addParam('fl', 'ds_field_press_release_date');
}

/**
 * Implements hook_workbench_moderation_access_alter().
 */
function jrc_sh_core_workbench_moderation_access_alter(&$access, $op, $node) {
  if ($op == 'view revisions') {
    $access = user_access('view revisions');
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function jrc_sh_core_entity_property_info_alter(&$info) {
  $info['node']['properties']['current-revision-author-username'] = array(
    'label' => t('Current revision author username'),
    'type' => 'text',
    'description' => t('The username of the author of the current revision of the node.'),
    'computed' => TRUE,
    'field' => FALSE,
  );
  $info['node']['properties']['current-revision-author-realname'] = array(
    'label' => t('Current revision author realname'),
    'type' => 'text',
    'description' => t('The realname of the author of the current revision of the node.'),
    'computed' => TRUE,
    'field' => FALSE,
  );
  $info['node']['properties']['current-revision-author-mail'] = array(
    'label' => t('Current revision author email'),
    'type' => 'text',
    'description' => t('The email of the author of the current revision of the node.'),
    'computed' => TRUE,
    'field' => FALSE,
  );
}

/**
 * Implements hook_tokens().
 */
function jrc_sh_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'entity' && $data['entity_type'] == 'node') {
    $node = $data['entity'];
    if (isset($node->revision_uid)) {
      $revision_author = user_load($node->revision_uid);
      $sanitize = !empty($options['sanitize']);
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'current-revision-author-username':
            $replacements[$original] = $sanitize ? check_plain($revision_author->name) : $revision_author->name;
            break;

          case 'current-revision-author-realname':
            $replacements[$original] = $sanitize ? check_plain($revision_author->realname) : $revision_author->realname;
            break;

          case 'current-revision-author-mail':
            $replacements[$original] = $sanitize ? check_plain($revision_author->mail) : $revision_author->mail;
            break;
        }
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrc_sh_core_form_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attributes']['class'][] = 'js-confirm-pop-up';
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'jrc_sh_core') . '/js/js_confirm_pop_up.js',
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function jrc_sh_core_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'init') {
    if (isset($implementations['update'])) {
      unset($implementations['update']);
    }
  }
}

/**
 * Implements hook_init().
 */
function jrc_sh_core_init() {
  global $user;
  if ($user->uid == '1') {
    switch ($_GET['q']) {
      // These pages don't need additional nagging.
      case 'admin/appearance/update':
      case 'admin/appearance/install':
      case 'admin/modules/update':
      case 'admin/modules/install':
      case 'admin/reports/updates':
      case 'admin/reports/updates/update':
      case 'admin/reports/updates/install':
      case 'admin/reports/updates/settings':
      case 'admin/reports/status':
      case 'admin/update/ready':
        return;

      // If we are on the appearance or modules list, display a detailed report.
      // Of the update status.
      case 'admin/appearance':
      case 'admin/modules':
        $verbose = TRUE;
        break;
    }

    module_load_install('update');
    $status = update_requirements('runtime');
    foreach (array('core', 'contrib') as $report_type) {
      $type = 'update_' . $report_type;
      if (!empty($verbose)) {
        if (isset($status[$type]['severity'])) {
          if ($status[$type]['severity'] == REQUIREMENT_ERROR) {
            drupal_set_message($status[$type]['description'], 'error', FALSE);
          }
          elseif ($status[$type]['severity'] == REQUIREMENT_WARNING) {
            drupal_set_message($status[$type]['description'], 'warning', FALSE);
          }
        }
      }
      // Otherwise, if we're on *any* admin page and there's a security.
      // Update missing, print an error message about it.
      else {
        if (isset($status[$type])
            && isset($status[$type]['reason'])
            && $status[$type]['reason'] === UPDATE_NOT_SECURE) {
          drupal_set_message($status[$type]['description'], 'error', FALSE);
        }
      }
    }
  }
}

/**
 * Implements hook_multisite_drupal_toolbox_filter_options_alter().
 */
function jrc_sh_core_multisite_drupal_toolbox_filter_options_alter(&$filter_options) {
  // Enable the <object> tag, strongly not advised of course.
  $filter_options['valid_elements']['iframe'] = array('*' => TRUE);
}
