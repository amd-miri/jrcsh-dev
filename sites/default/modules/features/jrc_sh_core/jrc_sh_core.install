<?php

/**
 * @file
 * This file contains the jrc_sh_core feature install functions.
 */

/**
 * Implements hook_enable().
 */
function jrc_sh_core_enable() {
  drupal_set_message(t("The feature JRC SH Core has been enabled."), 'status');
}

/**
 * Implements hook_disable().
 */
function jrc_sh_core_disable() {
  drupal_set_message(t("The feature JRC SH Core has been disabled."), 'status');
}

/**
 * Enable and disable some modules.
 */
function jrc_sh_core_update_7001() {
  module_enable(array('node_revision_delete'), TRUE);
  module_disable(array('bundle_copy', 'media_browser_plus', 'views_tree'), FALSE);
}

/**
 * Uninstall bundle_copy, media_browser_plus and views_tree.
 */
function jrc_sh_core_update_7002() {
  drupal_uninstall_modules(array('bundle_copy',
    'media_browser_plus',
    'views_tree',
  ), FALSE);
}

/**
 * Enable match_redirect module.
 */
function jrc_sh_core_update_7003() {
  module_enable(array('match_redirect'), TRUE);
}

/**
 * Enable apachesolr_sort module.
 */
function jrc_sh_core_update_7004() {
  module_enable(array('apachesolr_sort'), TRUE);
}

/**
 * Enable entityreference_prepopulate module.
 */
function jrc_sh_core_update_7005() {
  module_enable(array('entityreference_prepopulate'), TRUE);
}

/**
 * Disable unused modules of the past migration.
 */
function jrc_sh_core_update_7006() {
  module_disable(array('jrc_menu_import',
    'jrc_file_fields_import',
    'jrc_d2d_import_modif',
  ), FALSE);
  drupal_uninstall_modules(array('jrc_menu_import',
    'jrc_file_fields_import',
    'jrc_d2d_import_modif',
  ), FALSE);
}

/**
 * Enable views_rss module.
 */
function jrc_sh_core_update_7007() {
  module_enable(array('views_rss'), TRUE);
  module_enable(array('views_rss_core'), TRUE);
  module_enable(array('views_rss_dc'), TRUE);
}

/**
 * Enables workbench_og module.
 */
function jrc_sh_core_update_7008() {
  module_enable(array('workbench_og'), TRUE);
  module_enable(array('multisite_og_button'), TRUE);
}

/**
 * Enables metatag module.
 */
function jrc_sh_core_update_7009() {
  module_enable(array('metatag',
    'metatag_context',
    'metatag_facebook',
    'metatag_google_plus',
    'metatag_mobile',
    'metatag_opengraph',
    'metatag_twitter_cards',
    'metatag_views',
  ), TRUE);
}

/**
 * Enables menu default link module.
 */
function jrc_sh_core_update_7010() {
  module_enable(array(
    'og_menu_default_links',
  ), TRUE);
}

/**
 * Enables Imagecache_Token module.
 */
function jrc_sh_core_update_7011() {
  module_enable(array(
    'imagecache_token',
  ), TRUE);
}

/**
 * Enables jrc_news_to_su_import feature.
 */
function jrc_sh_core_update_7012() {
  module_enable(array(
    'jrc_news_to_su_import',
  ), TRUE);
}

/**
 * Enables better_exposed_filters module.
 */
function jrc_sh_core_update_7013() {
  module_enable(array(
    'better_exposed_filters',
  ), TRUE);
}

/**
 * Enables apachesolr_autocomplete module.
 */
function jrc_sh_core_update_7014() {
  module_enable(array(
    'apachesolr_autocomplete',
  ), TRUE);
}

/**
 * Enables og_vocab and disable jrc_news_to_su_import.
 */
function jrc_sh_core_update_7015() {
  module_enable(array(
    'og_vocab',
  ), TRUE);
  module_disable(array(
    'jrc_news_to_su_import',
  ), FALSE);
  drupal_uninstall_modules(array(
    'jrc_news_to_su_import',
  ), FALSE);
}

/**
 * Enables facetapi_bonus.
 */
function jrc_sh_core_update_7016() {
  module_enable(array(
    'facetapi_bonus',
  ), TRUE);
}

/**
 * Enables xmlsitemap module.
 */
function jrc_sh_core_update_7017() {
  module_enable(array(
    'xmlsitemap',
    'xmlsitemap_custom',
    'xmlsitemap_engines',
    'xmlsitemap_menu',
    'xmlsitemap_node',
    'xmlsitemap_taxonomy',
    'xmlsitemap_user',
  ), TRUE);
}

/**
 * Remove the corrupted file (NEMA-1350).
 */
function jrc_sh_core_update_7018() {
  db_delete('file_managed')
    ->condition('filename', 'encr.jpg')
    ->execute();
}

/**
 * Remove css and js injector.
 */
function jrc_sh_core_update_7019() {
  module_enable(array(
    'feeds',
    'feeds_ui',
    'feeds_tamper',
    'feeds_tamper_ui',
    'feeds_et',
    'nexteuropa_newsroom',
  ), TRUE);
  module_disable(array(
    'js_injector',
    'css_injector',
  ), FALSE);
  drupal_uninstall_modules(array(
    'js_injector',
    'css_injector',
    'apachesolr_autocomplete',
  ), FALSE);
}

/**
 * Remove the corrupted file (NEMA-1514).
 */
function jrc_sh_core_update_7020() {
  db_delete('file_managed')
    ->condition('fid', '174010')
    ->execute();
}

/**
 * Enable nexteuropa_patch.
 */
function jrc_sh_core_update_7021() {
  module_enable(array(
    'nexteuropa_patch',
  ), TRUE);
}

/**
 * Enable cacheflush.
 */
function jrc_sh_core_update_7022() {
  module_enable(array(
    'cacheflush',
  ), TRUE);
}

/**
 * Fix undefined language in body after upgrade.
 */
function jrc_sh_core_update_7023(&$sandbox) {
  if (empty($sandbox)) {
    $sandbox['progress'] = 0;

    // How many entities will need processing?
    // Select all nodes that don't have en content but und.
    $subquery = db_select('field_data_body', 'b')
      ->fields('b', array('entity_id'))
      ->condition('b.language', 'en', '=');
    $res = db_select('field_data_body', 'b')
      ->fields('b', array('entity_id'))
      ->condition('b.language', 'und', '=')
      ->condition('b.entity_id', $subquery, 'NOT IN')
      ->execute();
    $count = $res->rowCount();

    if (intval($count) === 0) {
      // Nothing to do.
      $sandbox['#finished'] = 1;
      return;
    }
    // Batch 100 items in one go.
    $sandbox['max'] = ceil($count / 100);
    $sandbox['chunks'] = array_chunk($res->fetchCol(), 100);
  }

  $offset = $sandbox['progress'];
  $batch = $sandbox['chunks'][$offset];
  foreach ($batch as $nid) {
    $node = node_load($nid);

    if (!empty($node) && isset($node->body[LANGUAGE_NONE]) && !empty($node->body[LANGUAGE_NONE])) {
      // Do the old switcheroo!
      $body = $node->body[LANGUAGE_NONE];
      unset($node->body[LANGUAGE_NONE]);
      $node->body['en'] = $body;
      $node->language = 'en';
      $node->revision = 1;
      $node->workbench_modetation_state_new = workbench_moderation_state_published();
      node_save($node);
    }
  }
  // Are we done ?
  $sandbox['progress']++;
  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
}

/**
 * Remove corrupted file.
 */
function jrc_sh_core_update_7024() {
  db_delete('file_managed')
    ->condition('fid', '175604')
    ->execute();
}

/**
 * Disable token_custom module.
 */
function jrc_sh_core_update_7025() {
  module_disable(array(
    'token_custom',
  ), FALSE);
  drupal_uninstall_modules(array(
    'token_custom',
  ), FALSE);
}

/**
 * Enable term_reference_tree module.
 */
function jrc_sh_core_update_7026() {
  module_enable(array('term_reference_tree'), TRUE);
}

/**
 * Enable Apachesolr realtime module.
 */
function jrc_sh_core_update_7027() {
  module_enable(array(
    'apachesolr_realtime',
    'apachesolr_realtime_reports',
  ), TRUE);
}

/**
 * Disable metatag_mobile module.
 */
function jrc_sh_core_update_7030() {
  module_disable(array(
    'metatag_mobile',
  ), FALSE);
  drupal_uninstall_modules(array(
    'metatag_mobile',
  ), FALSE);
}

/**
 * Disable cacheflush module.
 */
function jrc_sh_core_update_7031() {
  module_disable(array(
    'cacheflush_entity',
    'cacheflush',
  ), FALSE);
  drupal_uninstall_modules(array(
    'cacheflush_entity',
    'cacheflush',
  ), FALSE);
}

/**
 * Enable Contextual View Modes realtime module.
 */
function jrc_sh_core_update_7032() {
  module_enable(array(
    'contextual_view_modes',
  ), TRUE);
}

/**
 * Disable Contextual View Modes realtime module.
 */
function jrc_sh_core_update_7033() {
  module_disable(array(
    'contextual_view_modes',
  ), TRUE);
}

/**
 * Enable some modules and remove some corrupted tags.
 */
function jrc_sh_core_update_7034() {
  module_enable(array(
    'conditional_fields',
    'brexit',
  ), TRUE);
  module_disable(array(
    'contextual_view_modes',
  ), FALSE);
  drupal_uninstall_modules(array(
    'contextual_view_modes',
  ), FALSE);
  // Remove the corrupted tags from DB.
  db_delete('field_data_field_research_areas')
    ->condition('field_research_areas_tid', array(2191, 2192, 2193), 'IN')
    ->execute();
}

/**
 * Disable nexteuropa_scheduler_message module.
 */
function jrc_sh_core_update_7035() {
  module_disable(array(
    'nexteuropa_scheduler_message',
  ), FALSE);
  drupal_uninstall_modules(array(
    'nexteuropa_scheduler_message',
  ), FALSE);
}

/**
 * Enable ecas_group_sync and field_collection modules.
 */
function jrc_sh_core_update_7036() {
  module_enable(array(
    'ecas_group_sync',
    'field_collection',
  ), TRUE);
}

/**
 * Enable ecas_taxonomy module.
 */
function jrc_sh_core_update_7037() {
  module_enable(array(
    'ecas_taxonomy',
  ), TRUE);
}

/**
 * Remove corrupted file.
 */
function jrc_sh_core_update_7038() {
  db_delete('file_managed')
    ->condition('fid', '180079')
    ->execute();
}

/**
 * Enable the feed_ex module and delete a corrupted file.
 */
function jrc_sh_core_update_7039() {
  module_enable(array(
    'feeds_ex',
  ), TRUE);

  db_delete('file_managed')
    ->condition('fid', '180643')
    ->execute();
}

/**
 * Enable the field_validation modules.
 */
function jrc_sh_core_update_7040() {
  module_enable(array(
    'field_validation',
    'field_validation_extras',
    'field_validation_ui',
    'property_validation',
  ), TRUE);
}

/**
 * Disable and uninstall migrate modules.
 */
function jrc_sh_core_update_7041() {
  $modules = array(
    'migrate_d2d',
    'migrate_d2d_ui',
    'migrate',
    'migrate_ui',
    'migrate_extras',
  );
  module_disable($modules, FALSE);
  drupal_uninstall_modules($modules, FALSE);
}

/**
 * Deleting fields of type jquery_colorpicker.
 */
function jrc_sh_core_update_7042() {
  $fields = array_keys(field_read_fields(array('type' => 'jquery_colorpicker')));
  foreach ($fields as $field) {
    field_delete_field($field);
  }
  field_purge_batch(0);
}

/**
 * Disable and uninstall jquery_colorpicker module.
 */
function jrc_sh_core_update_7043() {
  $modules = array(
    'jquery_colorpicker',
  );
  module_disable($modules, FALSE);
  drupal_uninstall_modules($modules, FALSE);
}

/**
 * Remove corrupted file with fid 181473.
 */
function jrc_sh_core_update_7044() {
  db_delete('file_managed')
    ->condition('fid', '181473')
    ->execute();
}

/**
 * Disable and uninstall og_field_access module.
 */
function jrc_sh_core_update_7045() {
  $modules = array(
    'og_field_access',
  );
  module_disable($modules, FALSE);
  drupal_uninstall_modules($modules, FALSE);
}

/**
 * Fix workbench_moderation_node_history table.
 */
function jrc_sh_core_update_7046() {
  db_update('workbench_moderation_node_history')
    ->fields(['uid' => 1])
    ->condition('uid', 0)
    ->execute();
}

/**
 * Disable taxonomy_csv module.
 */
function jrc_sh_core_update_7047() {
  module_disable(array(
    'taxonomy_csv',
  ), FALSE);
  drupal_uninstall_modules(array(
    'taxonomy_csv',
  ), FALSE);
}

/**
 * JRCSH-144 webtool/openaccess roles.
 */
function jrc_sh_core_update_7048() {
  module_enable(array(
    'jrc_sh_permissions',
  ),
    TRUE);
}

/**
 * Remove corrupted file with fid 185018.
 */
function jrc_sh_core_update_7049() {
  db_delete('file_managed')
    ->condition('fid', '185018')
    ->execute();
}

/**
 * Prepare EWPP migration.
 */
function jrc_sh_core_update_7050() {
  module_enable(array(
    'jrc_sh_content_types',
  ),
    TRUE);
  features_revert_module('jrc_sh_content_types');
}

/**
 * Update DB to configure data value for all instance of field_migration_status.
 */
function jrc_sh_core_update_7051() {
  // Indexes.
  $sql = "
    INSERT INTO taxonomy_index
    (nid, tid, created, sticky)

    -- Content marked to be kept
    SELECT
    	ne.nid, 3337, UNIX_TIMESTAMP(), 0
    FROM
    	node ne
    	LEFT JOIN field_data_field_event_date fed ON (
    		fed.bundle = 'event'
    		AND fed.entity_type = 'node'
    		AND fed.entity_id = nid
    		AND fed.revision_id = vid
    	)
    	LEFT JOIN field_data_field_news_date fnd ON (
    		fnd.bundle IN ('news', 'science_updates')
    		AND fnd.entity_type = 'node'
    		AND fnd.entity_id = nid
    		AND fnd.revision_id = vid
    	)
    WHERE
    	-- not content already having a value
    	nid NOT IN (
    			SELECT
    				DISTINCT nid
    			FROM
    				taxonomy_index ti
    			WHERE
    				ti.tid IN (3337, 3338, 3339)
    		)
    	AND (
    		-- og groups
    		(
    			ne.nid IN (
    				SELECT DISTINCT gid
    				FROM og_membership
    			)
    			-- og group contents
    			OR ne.nid IN (
    				SELECT etid
    				FROM og_membership
    				WHERE
    					group_type = 'node'
    					AND entity_type = 'node'
    			)
    		)

    		-- type where all can be published
    		OR type IN ('evaluation_reports', 'interlaboratory_comparisons', 'open_access_call', 'open_access_project', 'patent', 'rm_application_notes', 'training_programme')

    		-- Publication not imported from Pubsy
    		OR (
    			type = 'publication'
    			AND NOT ne.uid = 1
    		)

    		-- content updated or modified after 01/03/2019
    		OR (
    			type = 'page'
    			AND (
    				created > 1551394800
    				OR changed > 1551394800
    			)
    		)

    		-- content updated or modified after 01/03/2020
    		OR (
    			type IN ('network_bureau', 'scientific_tool', 'research_facility')
    			AND (
    				created > 1583017200
    				OR changed > 1583017200
    			)
    		)

    		-- news date after 01/03/2017
    		OR (
    			type IN ('news', 'science_updates')
    			AND field_news_date_value > DATE('2017-03-01')
    		)

    		-- event date after 01/03/2019
    		OR (
    			type = 'event'
    			AND field_event_date_value > 1551394800
    		)
    	);";
  db_query($sql);

  $sql = "
    INSERT INTO taxonomy_index
    (nid, tid, created, sticky)

    -- Content marked to be migrated as draft
    SELECT
    	ne.nid, 3339, UNIX_TIMESTAMP(), 0
    FROM
    	node ne
    WHERE
    	-- not content already having a value
    	-- not from og groups: explicitly excluded because having a value from previous query
    	nid NOT IN (
    			SELECT
    				DISTINCT nid
    			FROM
    				taxonomy_index ti
    			WHERE
    				ti.tid IN (3337, 3338, 3339)
    		)
    	-- published items
    	AND ne.status = 1
    	-- of all the rest for those contents
    	AND type IN ('topic', 'page', 'network_bureau', 'scientific_tool', 'research_facility', 'news', 'science_updates');";
  db_query($sql);

  $sql = "
    INSERT INTO taxonomy_index
    (nid, tid, created, sticky)

    -- Everyhting else can be marked for dropped as default.
    SELECT
    	ne.nid, 3338, UNIX_TIMESTAMP(), 0
    FROM
    	node ne
    WHERE
    	-- Exclude Pubsy publications.
    	NOT (
    		type = 'publication'
    		AND ne.uid = 1
    	)
    	-- Only in content types that have the field instance.
    	AND (
    		type IN (
    			SELECT bundle
    			FROM field_config_instance
    			WHERE
    				entity_type = 'node'
    				AND field_name = 'field_migration_status'
    		)
    	)
    	-- Exclude content already having a value
    	AND nid NOT IN (
    		SELECT
    			DISTINCT nid
    		FROM
    			taxonomy_index ti
    		WHERE
    			ti.tid IN (3337, 3338, 3339)
    	);";
  db_query($sql);

  // Data of field.
  $sql = "
    INSERT INTO field_data_field_migration_status
    (entity_type, deleted, delta, entity_id, bundle, field_migration_status_tid, language, revision_id)

    -- Content marked to be kept
    SELECT
    	'node', 0, 0, ne.nid, ne.type, 3337, 'und', ne.vid
    FROM
    	node ne
    	LEFT JOIN field_data_field_event_date fed ON (
    		fed.bundle = 'event'
    		AND fed.entity_type = 'node'
    		AND fed.entity_id = nid
    		AND fed.revision_id = vid
    	)
    	LEFT JOIN field_data_field_news_date fnd ON (
    		fnd.bundle IN ('news', 'science_updates')
    		AND fnd.entity_type = 'node'
    		AND fnd.entity_id = nid
    		AND fnd.revision_id = vid
    	)
    WHERE
    	-- not content already having a value
    	nid NOT IN (
    			SELECT
    				DISTINCT entity_id
    			FROM
    				field_data_field_migration_status
    		)
    	AND (
    		-- og groups
    		(
    			ne.nid IN (
    				SELECT DISTINCT gid
    				FROM og_membership
    			)
    			-- og group contents
    			OR ne.nid IN (
    				SELECT etid
    				FROM og_membership
    				WHERE
    					group_type = 'node'
    					AND entity_type = 'node'
    			)
    		)

    		-- type where all can be published
    		OR type IN ('evaluation_reports', 'interlaboratory_comparisons', 'open_access_call', 'open_access_project', 'patent', 'rm_application_notes', 'training_programme')

    		-- Publication not imported from Pubsy
    		OR (
    			type = 'publication'
    			AND NOT ne.uid = 1
    		)

    		-- content updated or modified after 01/03/2019
    		OR (
    			type = 'page'
    			AND (
    				created > 1551394800
    				OR changed > 1551394800
    			)
    		)

    		-- content updated or modified after 01/03/2020
    		OR (
    			type IN ('network_bureau', 'scientific_tool', 'research_facility')
    			AND (
    				created > 1583017200
    				OR changed > 1583017200
    			)
    		)

    		-- news date after 01/03/2017
    		OR (
    			type IN ('news', 'science_updates')
    			AND field_news_date_value > DATE('2017-03-01')
    		)

    		-- event date after 01/03/2019
    		OR (
    			type = 'event'
    			AND field_event_date_value > 1551394800
    		)
    	);";
  db_query($sql);

  $sql = "
    INSERT INTO field_data_field_migration_status
    (entity_type, deleted, delta, entity_id, bundle, field_migration_status_tid, language, revision_id)

    -- Content marked to be migrated as draft
    SELECT
    	'node', 0, 0, ne.nid, ne.type, 3339, 'und', ne.vid
    FROM
    	node ne
    WHERE
    	-- not content already having a value
    	-- not from og groups: explicitly excluded because having a value from previous query
    	nid NOT IN (
    			SELECT
    				DISTINCT entity_id
    			FROM
    				field_data_field_migration_status
    		)
    	-- published items
    	AND ne.status = 1
    	-- of all the rest for those contents
    	AND type IN ('topic', 'page', 'network_bureau', 'scientific_tool', 'research_facility', 'news', 'science_updates');";
  db_query($sql);

  $sql = "
    INSERT INTO field_data_field_migration_status
    (entity_type, deleted, delta, entity_id, bundle, field_migration_status_tid, language, revision_id)

    -- Everyhting else can be marked for dropped as default.
    SELECT
    	'node', 0, 0, ne.nid, ne.type, 3338, 'und', ne.vid
    FROM
    	node ne
    WHERE
    	-- Exclude Pubsy publications.
    	NOT (
    		type = 'publication'
    		AND ne.uid = 1
    	)
    	-- Only in content types that have the field instance.
    	AND (
    		type IN (
    			SELECT bundle
    			FROM field_config_instance
    			WHERE
    				entity_type = 'node'
    				AND field_name = 'field_migration_status'
    		)
    	)
    	-- Exclude content already having a value
    	AND nid NOT IN (
    		SELECT
    			DISTINCT entity_id
    		FROM
    			field_data_field_migration_status
    	);";
  db_query($sql);

  // Revision data.
  $sql = "
    INSERT INTO field_revision_field_migration_status
    (entity_type, deleted, delta, entity_id, bundle, field_migration_status_tid, language, revision_id)

    -- Content marked to be kept
    SELECT
    	'node', 0, 0, ne.nid, ne.type, 3337, 'und', ne.vid
    FROM
    	node ne
    	LEFT JOIN field_data_field_event_date fed ON (
    		fed.bundle = 'event'
    		AND fed.entity_type = 'node'
    		AND fed.entity_id = nid
    		AND fed.revision_id = vid
    	)
    	LEFT JOIN field_data_field_news_date fnd ON (
    		fnd.bundle IN ('news', 'science_updates')
    		AND fnd.entity_type = 'node'
    		AND fnd.entity_id = nid
    		AND fnd.revision_id = vid
    	)
    WHERE
    	-- not content already having a value
    	nid NOT IN (
    			SELECT
    				DISTINCT entity_id
    			FROM
    				field_revision_field_migration_status
    		)
    	AND (
    		-- og groups
    		(
    			ne.nid IN (
    				SELECT DISTINCT gid
    				FROM og_membership
    			)
    			-- og group contents
    			OR ne.nid IN (
    				SELECT etid
    				FROM og_membership
    				WHERE
    					group_type = 'node'
    					AND entity_type = 'node'
    			)
    		)

    		-- type where all can be published
    		OR type IN ('evaluation_reports', 'interlaboratory_comparisons', 'open_access_call', 'open_access_project', 'patent', 'rm_application_notes', 'training_programme')

    		-- Publication not imported from Pubsy
    		OR (
    			type = 'publication'
    			AND NOT ne.uid = 1
    		)

    		-- content updated or modified after 01/03/2019
    		OR (
    			type = 'page'
    			AND (
    				created > 1551394800
    				OR changed > 1551394800
    			)
    		)

    		-- content updated or modified after 01/03/2020
    		OR (
    			type IN ('network_bureau', 'scientific_tool', 'research_facility')
    			AND (
    				created > 1583017200
    				OR changed > 1583017200
    			)
    		)

    		-- news date after 01/03/2017
    		OR (
    			type IN ('news', 'science_updates')
    			AND field_news_date_value > DATE('2017-03-01')
    		)

    		-- event date after 01/03/2019
    		OR (
    			type = 'event'
    			AND field_event_date_value > 1551394800
    		)
    	);";
  db_query($sql);

  $sql = "
    INSERT INTO field_revision_field_migration_status
    (entity_type, deleted, delta, entity_id, bundle, field_migration_status_tid, language, revision_id)

    -- Content marked to be migrated as draft
    SELECT
    	'node', 0, 0, ne.nid, ne.type, 3339, 'und', ne.vid
    FROM
    	node ne
    WHERE
    	-- not content already having a value
    	-- not from og groups: explicitly excluded because having a value from previous query
    	nid NOT IN (
    			SELECT
    				DISTINCT entity_id
    			FROM
    				field_revision_field_migration_status
    		)
    	-- published items
    	AND ne.status = 1
    	-- of all the rest for those contents
    	AND type IN ('topic', 'page', 'network_bureau', 'scientific_tool', 'research_facility', 'news', 'science_updates');";
  db_query($sql);

  $sql = "
    INSERT INTO field_revision_field_migration_status
    (entity_type, deleted, delta, entity_id, bundle, field_migration_status_tid, language, revision_id)

    -- Everyhting else can be marked for dropped as default.
    SELECT
    	'node', 0, 0, ne.nid, ne.type, 3338, 'und', ne.vid
    FROM
    	node ne
    WHERE
    	-- Exclude Pubsy publications.
    	NOT (
    		type = 'publication'
    		AND ne.uid = 1
    	)
    	-- Only in content types that have the field instance.
    	AND (
    		type IN (
    			SELECT bundle
    			FROM field_config_instance
    			WHERE
    				entity_type = 'node'
    				AND field_name = 'field_migration_status'
    		)
    	)
    	-- Exclude content already having a value
    	AND nid NOT IN (
    		SELECT
    			DISTINCT entity_id
    		FROM
    			field_revision_field_migration_status
    	);
  ";
  db_query($sql);
}

/**
 * Rules on Pubsy pulication redirect and message.
 */
function jrc_sh_core_update_7052() {
  module_enable(array(
    'jrc_sh_rules',
  ),
    TRUE);
  features_revert_module('jrc_sh_rules');
  features_revert(array('jrc_sh_core' => array('context')));
}
